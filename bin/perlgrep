#!/usr/bin/env perl

use strict;
use Getopt::Long;

my $first_lines;
my $sum_captures;
my $count_matches;
my $debug;

Getopt::Long::GetOptions(
    'first-lines|h:i'   => \$first_lines,
    'sum-captures'      => \$sum_captures,
    'count-matches|c'   => \$count_matches,
    'debug|d'           => \$debug,
);

if (defined $first_lines && !$first_lines) {
    # no value given - so default to 1 line
    $first_lines = 1;
}

my $patt = shift @ARGV;

my $patt_re = qr{$patt}
    or die "That doesn't look like a valid regexp";
warn "OK, patt: $patt_re\n" if $debug;
my @json_data;
my $output_json;
my $sum;
my %matches;

# If we want to output the first $first_lines regardless, do so now...
while ($first_lines-- > 0) {
    print scalar <STDIN>;
}

while (my $line = <STDIN>) {
    if ($line =~ $patt_re) {
        warn "Matched line: $line\n" if $debug;
        if (keys %+) {
            # First, if we used named captures, we're after parseable output
            # so we'll turn them into JSON at the end
            push @json_data, {%+};
        } elsif (defined $1) {
            # Simple capture
            # If we're summing, do so...
            if ($sum_captures) {
                $sum += $1;
            } elsif ($count_matches) {
                $matches{$1}++;
            } else {
                # output just the bit we wanted to capture
                print "$1\n";
            }
        } else {
            # No captures, output or count the whole line
            if ($count_matches) {
                $matches{$line}++;
            } else {
                print $line;
            }
        }
    }
}

if ($sum_captures) {
    print "Sum of captures: $sum\n";
}

if (@json_data) {
    require JSON;
    print JSON::to_json(\@json_data);
}

if ($count_matches) {
    for my $match (sort { $matches{$b} <=> $matches{$a} } keys %matches) {
        print "$match:  $matches{$match}\n";
    }
}
