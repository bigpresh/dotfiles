#!/usr/bin/env perl

# Quick convenient tool to search for a branch matching the given pattern
# and change to it.
# 
# If only one match is found - e.g. you've searched for an issue number or
# something fairly unique) then switch straight to it.
# 
# If not, present a numbered list, and ask you to enter the number of the
# branch you want.

use strict;
use 5.010;
use Data::Dump;
use Term::ANSIColor;

my $pattern = shift or die "Usage: $0 pattern\n";

# TODO: rework so that we skip pulling the list of branches if we said `-` and
# go straight to the master branch
if ($pattern eq '-') {
    $pattern = 'master';
}

my @branches = get_branches();
my @matches = grep { $_->{name} =~ $pattern } @branches;

if (!@matches) {
    # First, see if we said "master" but meant whatever the head branch on
    # this repo is (master, main, production, devel, whatever it's called,
    # whether because of silly virtue-signalling or other reasons)
    if ($pattern =~ /^(head|master)$/) {
        my $origin = `git remote`;
        # Not sure origin names can contain any shell metachars, but we'll
        # use it in backticks so better safe than sorry...
        $origin =~ s/[^a-zA-Z0-9_-]//g;
        say "Found origin '$origin'";
        if ($origin) {
            my $origin_info = `git remote show $origin`;
            if (my ($head_branch) = $origin_info =~ m{HEAD branch: (\w+)}) {
                say "Found head branch $head_branch";
                my ($head_branch_match) = grep {
                    $_->{name} eq $head_branch
                } @branches;
                if ($head_branch_match) {
                    say colored(
                        "Using head branch $head_branch instead of master",
                        "yellow",
                    );
                    switch_branch($head_branch_match);
                    exit;
                } else {
                    die colored(
                        "Detected repo head branch $head_branch"
                        . " but found no such branch!",
                        "red bold",
                    );
                }
            }
        }
    }

    # Alright, no match, and automagic "said master, meant whatever the head
    # branch is called here" didn't correct us, so there's just no matches
    die colored("No branch matching '$pattern' found\n", "red bold");
}

# If only one match, switch to it
if (@matches == 1) {
  switch_branch($matches[0]);
  exit;
}

# OK, present a numbered list to pick from:
say "Multiple branches matched '$pattern' - pick the one you want from:";
my $num = 0;
for my $branch_spec (@matches) {
  printf "  [%2d] %s\n", $num++, $branch_spec->{name};
}
print "Enter number ?> ";
chomp($num = <>);
if (my $picked_branch = $matches[$num]) {
  switch_branch($picked_branch);
} else {
  die colored("Invalid entry\n", "red bold");
}


sub get_branches {
  # First, don't even call git if we're not in a repo
  if (!-d '.git') {
    die colored(
        "This must be used whilst in a git repository checkout\n", 
        "red bold",
    );
  }
  # OK, ask git for a list of branches, which we'll have to clean up.
  # We'll use -a so that we can match branches we've not checked out yet,
  # but then strip the remotes/xxx/ prefix from them.
  my @all_branches = `git branch -a`;
  if ($? != 0) {
    die colored(
        "Failed to execute git branch to get list of branches!",
        "red bold",
    );
  }
  return map {
    m{^(\*)?\s+(?:remotes/origin/)?(.+)} and { name => $2, current => !!$1 }
  } @all_branches;
}

sub switch_branch {
  my $branch_spec = shift;
  if ($branch_spec->{current}) {
    say colored(
        "You're already on $branch_spec->{name}, nothing to do",
        "bright_green bold",
    );
    exit 1;
  }
  chomp(my $current_branch = `git rev-parse --abbrev-ref HEAD`);
  say colored("Changing branch ", "bright_green")
    . colored($current_branch, "blue")
    . " -> "
    .  colored($branch_spec->{name}, "blue");
  say `git checkout $branch_spec->{name}`;

}
