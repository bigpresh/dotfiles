#!/usr/bin/env perl

# Quick convenient tool to make switching git branches more friendly.
#
# It will search for a branch matching the given pattern.
# 
# If only one match is found - e.g. you've searched for an issue number or something fairly unique) 
# then switch straight to it.
# 
# If not, present a numbered list, and ask you to enter the number of the branch you want.
#
# Also, if you ask to switch to `master` or `-`, then automatically determine's the repository's
# remote HEAD (main/master) branch and switches to that instead, so you don't need to remember if
# this particular repo uses e.g. "main" or "production" or something instead of "master", whether
# that's for operational reasons (having devel/production branches etc) or for virtue-signalling
# reasons.
#
# It's also useful that it prints the branch you changed *from* as well as to, so you have that
# easily visible in scrollback.  I may well enhance in future to keep a branch history as it
# goes, so you can ask it to go back.

use strict;
use 5.010;
use Data::Dump;
use Term::ANSIColor;

my $pattern = shift or die "Usage: $0 pattern\n";

my @branches = get_branches();
my @matches = grep { $_->{name} =~ $pattern } @branches;

# If we said `-`, or `master`, then we want the HEAD branch for the repo,
# check what that is as some repos use an alternative name (main, production,
# etc) for operational reasons or virtue-signalling.
if ($pattern =~ /^(master|-)$/) {
    # FIXME: make sure there's only one origin.  The vast majority will hve
    # just one remote, named 'origin', but not always.
    my $origin = `git remote`;
    chomp $origin;
    # Not sure origin names can contain any shell metachars, but we'll
    # use it in backticks so better safe than sorry...
    if ($origin =~ /[^a-zA-Z0-9_-]/) {
        die "Potentially unsafe chars in origin '$origin' refusing to use"
            . " in backticks";
    } elsif (!$origin) {
        if ($pattern eq '-') {
            die colored(
                "No origin, cannot determine master branch name",
                "bold red",
            );
        }
        say colored(
            "No origin so cannot check remote HEAD, using $pattern unchecked",
            "yellow",
        );
        switch_branch($pattern);
        exit;
    }

    say "Found origin '$origin'";
    my $origin_info = `git remote show $origin`;
    if (my ($head_branch) = $origin_info =~ m{HEAD branch: (\w+)}) {
        # Find this branch in @branches, as we'll need to pass over the branch spec to switch_branch()
        # so it can tell if we're already on that branch without checking again, and as a safety
        # check that we knew of the branch we determined
        my ($head_branch_match) = grep { $_->{name} eq $head_branch } @branches;
        if (!$head_branch_match) {
            # We didn't find a branch by this name in the list of branches - what?
            die colored(
                "Determined master branch name $head_branch, but not found in list of branches",
                "bold red",
            );
        }

        if ($pattern ne $head_branch) {
            my $not_master = $pattern eq 'master'
                ? 'instead of master' : '';
            say colored(
                "Using auto-determined head branch $head_branch $not_master",
                "yellow",
            );
            switch_branch($head_branch_match);
            exit;
        }
    } else {
        die colored(
            "failed to determine HEAD branch for origin $origin!",
            "red bold",
        );
    }
}


if (!@matches) {
    # Alright, no match, and automagic "said master, meant whatever the head
    # branch is called here" didn't correct us, so there's just no matches
    die colored("No branch matching '$pattern' found\n", "red bold");
}

# If only one match, switch to it
if (@matches == 1) {
  switch_branch($matches[0]);
  exit;
}

# If there are multiple matches, but one is an exact match, we almost certainly
# meant that
if (my ($exact_match) = grep { $_->{name} eq $pattern } @matches) {
    say "Multiple partial matches found but using exact match $exact_match->{name}";
    switch_branch($exact_match);
    exit;
}

# OK, present a numbered list to pick from:
say "Multiple branches matched '$pattern' - pick the one you want from:";
my $num = 0;
for my $branch_spec (@matches) {
  printf "  [%2d] %s\n", $num++, $branch_spec->{name};
}
print "Enter number ?> ";
chomp($num = <>);
if (my $picked_branch = $matches[$num]) {
  switch_branch($picked_branch);
} else {
  die colored("Invalid entry\n", "red bold");
}


sub get_branches {
  # First, don't even call git if we're not in a repo
  if (!-d '.git') {
    die colored(
        "This must be used whilst in a git repository checkout\n", 
        "red bold",
    );
  }
  # OK, ask git for a list of branches, which we'll have to clean up.
  # We'll use -a so that we can match branches we've not checked out yet,
  # but then strip the remotes/xxx/ prefix from them.
  my @all_branches = `git branch -a`;
  if ($? != 0) {
    die colored(
        "Failed to execute git branch to get list of branches!",
        "red bold",
    );
  }
  # Uniqueness check so that we don't e.g. report both a local branch named devel and a remote
  # branch remotes/origin/devel as two choices named "devel"
  my %seen_branch;
  return grep { 
      !$seen_branch{ $_->{name} }++
  } map {
    m{^(\*)?\s+(?:remotes/origin/)?(.+)} and { name => $2, current => !!$1 }
  } @all_branches;
}

sub switch_branch {
  my $branch_spec = shift;

  if ($branch_spec->{current}) {
    say colored(
        "You're already on $branch_spec->{name}, nothing to do",
        "bright_green bold",
    );
    exit 1;
  }
  chomp(my $current_branch = `git rev-parse --abbrev-ref HEAD`);
  say colored("Changing branch ", "bright_green")
    . colored($current_branch, "blue")
    . " -> "
    .  colored($branch_spec->{name}, "blue");
  say `git checkout $branch_spec->{name}`;

}
