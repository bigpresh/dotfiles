#!/usr/bin/env perl


use strict;
use 5.010;

# run `xscreensaver-command -watch`, and when a state change is reported to us,
# run the appropriate command if any.
#
# TODO: make the commands configurable rather than hardcoded.  For now, though,
# it's just intended to restore the desired screen layout when I unlock - it
# goes back to mirrored once the monitors have been off, which is Most Annoying.

my $cmd = "xrandr --output DP-1 --auto --output DVI-I-1 --auto --right-of DP-1";
my %state_command = (
    UNBLANK => $cmd,
    RUN     => $cmd,
);

# Run the xrandr command once when we start, to make sure we start out
# with the configuration we want
say "Ensuring initial configuration with $state_command{RUN}...";
`$state_command{RUN}`;

open my $xscreensaver_fh, "-|", "xscreensaver-command -watch"
    or die "Failed to execute xscreensaver-command - $!";

say "Waiting for events from xscreensaver-command -watch";
while (my $line = <$xscreensaver_fh>) {
    my ($new_state) = $line =~ /^([A-Z]+)\b/
        or die "Unrecognised input from xscreensaver_command: '$line'";

    if (my $cmd = $state_command{$new_state}) {
        warn "State $new_state, run command: $cmd";
        warn "but first, give it a moment...";
        sleep 6;
        warn "Alright, on we go...";
        # I've seen weird cases where the command fails - possibly because the
        # second monitor isn't fully "reconnected" at the point it runs? - so
        # retry if it fails initially.
        my $succeeded = 0;
        my $tries     = 0;
        while (!$succeeded && $tries++ < 5) {
            say "Executing $cmd";
            say `$cmd`;
            if ($? == 0) {
                say "Command executed successfully";
                $succeeded++;
            } else {
                say "Command failed, exited with $? - retrying";
                sleep 1;
            }
        }
    } else {
        warn "No command defined for new state $new_state";
    }
}

